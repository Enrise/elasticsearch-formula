# Salt managed config file
# Template: {{ source }}

{%- if cluster is defined %}
################################### Cluster ###################################

# Cluster name identifies your cluster for auto-discovery. If you're running
# multiple clusters on the same network, make sure you're using unique names.
#
{%- if 'name' in cluster: %}
cluster.name: {{ cluster.name }}
{%- endif %}

{%- endif %}
{%- if node is defined %}
#################################### Node #####################################

# Node names are generated dynamically on startup, so you're relieved
# from configuring them manually. You can tie this node to a specific name:
#
{%- if 'name' in node: %}
node.name: {{ node.name }}
{%- endif %}

# Every node can be configured to allow or deny being eligible as the master,
# and to allow or deny to store the data.
#
# Allow this node to be eligible as a master node (enabled by default):
#
node.master: {{ node.master|default('true') }}

#
# Allow this node to store data (enabled by default):
#
node.data: {{ node.data|default('true') }}

# A node can have generic attributes associated with it, which can later be used
# for customized shard allocation filtering, or allocation awareness. An attribute
# is a simple key value pair, similar to node.key: value, here is an example:
#
{%- if 'rack' in node: %}
node.rack: {{ node.rack }}
{%- endif %}

# By default, multiple nodes are allowed to start from the same installation location
# to disable it, set the following:
{%- if 'max_local_storage_nodes' in node: %}
node.max_local_storage_nodes: {{ node.max_local_storage_nodes }}
{%- endif %}

{%- endif %}
{%- if index is defined %}
#################################### Index ####################################

# You can set a number of options (such as shard/replica options, mapping
# or analyzer definitions, translog settings, ...) for indices globally,
# in this file.
#
# Note, that it makes more sense to configure index settings specifically for
# a certain index, either when creating it or by using the index templates API.
#
# See <http://elasticsearch.org/guide/en/elasticsearch/reference/current/index-modules.html> and
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/indices-create-index.html>
# for more information.

# Set the number of shards (splits) of an index (5 by default):
#
index.number_of_shards: {{ index.number_of_shards|default(5) }}

# Set the number of replicas (additional copies) of an index (1 by default):
#
index.number_of_replicas: {{ index.number_of_replicas|default(1) }}

# Note, that for development on a local machine, with small indices, it usually
# makes sense to "disable" the distributed features:
#
index.number_of_shards: {{ index.number_of_shards|default(1) }}
index.number_of_replicas: {{ index.number_of_replicas|default(0) }}

# These settings directly affect the performance of index and search operations
# in your cluster. Assuming you have enough machines to hold shards and
# replicas, the rule of thumb is:
#
# 1. Having more *shards* enhances the _indexing_ performance and allows to
#    _distribute_ a big index across machines.
# 2. Having more *replicas* enhances the _search_ performance and improves the
#    cluster _availability_.
#
# The "number_of_shards" is a one-time setting for an index.
#
# The "number_of_replicas" can be increased or decreased anytime,
# by using the Index Update Settings API.
#
# Elasticsearch takes care about load balancing, relocating, gathering the
# results from nodes, etc. Experiment with different settings to fine-tune
# your setup.

# Use the Index Status API (<http://localhost:9200/A/_status>) to inspect
# the index status.

{%- endif %}
{%- if path is defined %}
#################################### Paths ####################################

# Path to directory containing configuration (this file and logging.yml):
#
{%- if 'conf' in path: %}
path.conf: {{ path.conf }}
{%- endif %}

# Path to directory where to store index data allocated for this node.
#
{%- if 'data' in path: %}
path.data: {{ path.data }}
{%- endif %}

# Path to temporary files:
#
{%- if 'work' in path: %}
path.work: {{ path.work }}
{%- endif %}

# Path to log files:
{%- if 'logs' in path: %}
path.logs: {{ path.logs }}
{%- endif %}

# Path to where plugins are installed:
#
{%- if 'plugins' in path: %}
path.plugins: {{ path.plugins }}
{%- endif %}

{%- endif %}
{%- if plugin is defined: %}
#################################### Plugin ###################################

# If a plugin listed here is not installed for current node, the node will not start.
#
{% if 'mandatory' in plugin: %}
plugin.mandatory: {{ plugin.mandatory|join(',') }}
{%- endif %}

{%- endif %}
{%- if bootstrap is defined: %}
################################### Memory ####################################

# Elasticsearch performs poorly when JVM starts swapping: you should ensure that
# it _never_ swaps.
#
# Set this property to true to lock the memory:
#
{%- if 'mlockall' in bootstrap: %}
bootstrap.mlockall: {{ bootstrap.mlockall }}
{%- endif %}

# Make sure that the ES_MIN_MEM and ES_MAX_MEM environment variables are set
# to the same value, and that the machine has enough memory to allocate
# for Elasticsearch, leaving enough memory for the operating system itself.
#
# You should also make sure that the Elasticsearch process is allowed to lock
# the memory, eg. by using `ulimit -l unlimited`.

{%- endif %}
{%- if network is defined: %}
############################## Network And HTTP ###############################

# Elasticsearch, by default, binds itself to the 0.0.0.0 address, and listens
# on port [9200-9300] for HTTP traffic and on port [9300-9400] for node-to-node
# communication. (the range means that if the port is busy, it will automatically
# try the next port).

# Set the bind address specifically (IPv4 or IPv6):
#
{%- if 'bind_host' in network: %}
network.bind_host: {{ network.bind_host }}
{%- endif %}

# Set the address other nodes will use to communicate with this node. If not
# set, it is automatically derived. It must point to an actual IP address.
#
{%- if 'bind_host' in network: %}
network.publish_host: {{ network.publish_host }}
{%- endif %}

# Set both 'bind_host' and 'publish_host':
#
{%- if 'host' in network: %}
network.host: {{ network.host }}
{%- endif %}

# Set a custom port for the node to node communication (9300 by default):
#
#transport.tcp.port: 9300

# Enable compression for all communication between nodes (disabled by default):
#
#transport.tcp.compress: true

# Set a custom port to listen for HTTP traffic:
#
#http.port: 9200

# Set a custom allowed content length:
#
#http.max_content_length: 100mb

# Disable HTTP completely:
#
#http.enabled: false

{%- endif %}
{%- if gateway is defined: %}
################################### Gateway ###################################

# The gateway allows for persisting the cluster state between full cluster
# restarts. Every change to the state (such as adding an index) will be stored
# in the gateway, and when the cluster starts up for the first time,
# it will read its state from the gateway.

# There are several types of gateway implementations. For more information, see
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-gateway.html>.

# The default gateway type is the "local" gateway (recommended):
#
#gateway.type: local

# Settings below control how and when to start the initial recovery process on
# a full cluster restart (to reuse as much local data as possible when using shared
# gateway).

# Allow recovery process after N nodes in a cluster are up:
#
#gateway.recover_after_nodes: 1

# Set the timeout to initiate the recovery process, once the N nodes
# from previous setting are up (accepts time value):
#
#gateway.recover_after_time: 5m

# Set how many nodes are expected in this cluster. Once these N nodes
# are up (and recover_after_nodes is met), begin recovery process immediately
# (without waiting for recover_after_time to expire):
#
#gateway.expected_nodes: 2
{%- endif %}

############################# Recovery Throttling #############################

# These settings allow to control the process of shards allocation between
# nodes during initial recovery, replica allocation, rebalancing,
# or when adding and removing nodes.

# Set the number of concurrent recoveries happening on a node:
#
# 1. During the initial recovery
#
#cluster.routing.allocation.node_initial_primaries_recoveries: 4
#
# 2. During adding/removing nodes, rebalancing, etc
#
#cluster.routing.allocation.node_concurrent_recoveries: 2

# Set to throttle throughput when recovering (eg. 100mb, by default 20mb):
#
#indices.recovery.max_bytes_per_sec: 20mb

# Set to limit the number of open concurrent streams when
# recovering a shard from a peer:
#
#indices.recovery.concurrent_streams: 5


{%- if discovery is defined: %}
################################## Discovery ##################################

# Discovery infrastructure ensures nodes can be found within a cluster
# and master node is elected. Multicast discovery is the default.

# Set to ensure a node sees N other master eligible nodes to be considered
# operational within the cluster. This should be set to a quorum/majority of
# the master-eligible nodes in the cluster.
#
{%- if 'zen_minimum_master_nodes' in discovery: %}
discovery.zen.minimum_master_nodes: {{ discovery.zen_minimum_master_nodes }}
{%- endif %}

# Set the time to wait for ping responses from other nodes when discovering.
# Set this option to a higher value on a slow or congested network
# to minimize discovery failures:
#
#discovery.zen.ping.timeout: 3s

# For more information, see
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-zen.html>

# Unicast discovery allows to explicitly control which nodes will be used
# to discover the cluster. It can be used when multicast is not present,
# or to restrict the cluster communication-wise.
#
# 1. Disable multicast discovery (enabled by default):
#
{%- if 'zen_ping_multicast_enabled' in discovery: %}
discovery.zen.ping.multicast.enabled: {{ discovery.zen_ping_multicast_enabled }}
{%- endif %}
{%- if 'zen_ping_multicast_group' in discovery: %}
discovery.zen.ping.multicast.group: {{ discovery.zen_ping_multicast_group }}
{%- endif %}

#
# 2. Configure an initial list of master nodes in the cluster
#    to perform discovery when new nodes (master or data) are started:
#
#discovery.zen.ping.unicast.hosts: ["host1", "host2:port"]

{%- if 'zen_ping_unicast_hosts' in discovery: %}
discovery.zen.ping.unicast.hosts: {{ discovery.zen_ping_unicast_hosts }}
{%- endif %}

{%- if 'type' in discovery: %}
discovery.type: {{ discovery.type }}
{%- endif %}
{%- endif %}
{%- if cloud is defined: %}
#
# EC2 discovery allows to use AWS EC2 API in order to perform discovery.
#
# You have to install the cloud-aws plugin for enabling the EC2 discovery.
#
# For more information, see
# <http://elasticsearch.org/guide/en/elasticsearch/reference/current/modules-discovery-ec2.html>
#
# See <http://elasticsearch.org/tutorials/elasticsearch-on-ec2/>
# for a step-by-step tutorial.
{%- if 'aws' in cloud: %}
cloud.aws:
{%- for k, v in cloud.aws.items() %}
  {{ k }}: {{ v }}
{%- endfor -%}
{%- endif %}
# GCE discovery allows to use Google Compute Engine API in order to perform discovery.
#
# You have to install the cloud-gce plugin for enabling the GCE discovery.
#
# For more information, see <https://github.com/elasticsearch/elasticsearch-cloud-gce>.

# Azure discovery allows to use Azure API in order to perform discovery.
#
# You have to install the cloud-azure plugin for enabling the Azure discovery.
#
# For more information, see <https://github.com/elasticsearch/elasticsearch-cloud-azure>.
{%- endif %}
{%- if index is defined: %}
################################## Slow Log ##################################

# Shard level query and fetch threshold logging.

#index.search.slowlog.threshold.query.warn: 10s
#index.search.slowlog.threshold.query.info: 5s
#index.search.slowlog.threshold.query.debug: 2s
#index.search.slowlog.threshold.query.trace: 500ms

#index.search.slowlog.threshold.fetch.warn: 1s
#index.search.slowlog.threshold.fetch.info: 800ms
#index.search.slowlog.threshold.fetch.debug: 500ms
#index.search.slowlog.threshold.fetch.trace: 200ms

#index.indexing.slowlog.threshold.index.warn: 10s
#index.indexing.slowlog.threshold.index.info: 5s
#index.indexing.slowlog.threshold.index.debug: 2s
#index.indexing.slowlog.threshold.index.trace: 500ms
{%- endif %}
{%- if monitor is defined: %}
################################## GC Logging ################################

#monitor.jvm.gc.young.warn: 1000ms
#monitor.jvm.gc.young.info: 700ms
#monitor.jvm.gc.young.debug: 400ms

#monitor.jvm.gc.old.warn: 10s
#monitor.jvm.gc.old.info: 5s
#monitor.jvm.gc.old.debug: 2s
{%- endif %}

################################## Security ################################

# Uncomment if you want to enable JSONP as a valid return transport on the
# http server. With this enabled, it may pose a security risk, so disabling
# it unless you need it is recommended (it is disabled by default).
#
#http.jsonp.enable: true

################################## Scripting ################################

script.groovy.sandbox.enabled: {{ script_groovy_sandbox_enabled|default('false') }}
script.inline: {{ script_inline|default('off') }}
script.indexed: {{ script_indexed|default('off') }}
